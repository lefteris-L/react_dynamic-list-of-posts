{"version":3,"sources":["types/index.ts","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","utils/api.ts","components/PostDetails.tsx","components/PostsList.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["IError","Loader","className","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","postId","setComments","comments","setError","useState","name","setName","email","setEmail","setBody","isLoading","setIsLoading","isNameOk","setIsNameOk","isEmailOk","setIsEmailOk","isBodyOk","setIsBodyOk","isNameEmpty","isEmailEmpty","isBodyEmpty","id","Math","max","map","comm","postComment","a","None","comment","Add","onSubmit","event","preventDefault","htmlFor","type","placeholder","value","onChange","target","cn","onClick","PostDetails","selectedPost","isFormOpen","setIsFormOpen","error","title","savedComments","hasError","Delete","isButtonVisible","updateComments","useCallback","updatedComments","handleError","err","useEffect","Load","onDelete","commentId","filteredComments","filter","deleteComment","length","href","PostsList","posts","selectedPostId","setSelectedPost","setLoading","handlePost","post","UserSelector","users","selectedUser","setSelectedUser","startLoading","closePost","isActive","setIsActive","toggleDropdown","onSelect","user","onBlur","role","to","onMouseDown","App","setUsers","setPosts","setUser","setPost","setHasError","isLoadingComments","setIsLoadingComments","newPost","toggleIsLoading","param","toggleFormOpen","userId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a8ba83cb.chunk.js","sourcesContent":["export enum IError {\n  None,\n  Add,\n  Delete,\n  Load,\n}\n\nexport interface Comment {\n  id: number;\n  postId: number;\n  name: string;\n  email: string;\n  body: string;\n}\n\nexport type CommentData = Pick<Comment, 'name' | 'email' | 'body'>;\n\nexport interface User {\n  id: number;\n  name: string;\n  email: string;\n  phone: string;\n}\n\nexport interface Post {\n  id: number;\n  userId: number;\n  title: string;\n  body: string;\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: unknown) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: unknown) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","/* eslint-disable func-names */\nimport cn from 'classnames';\nimport React, { useState } from 'react';\nimport { Comment, IError } from '../types';\nimport { createComment } from '../utils/api';\n\ntype Props = {\n  postId: number\n  setComments: (updatedComments: Comment[]) => void\n  comments: Comment[]\n  setError: (error: IError) => void\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId, setComments, comments, setError,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [isNameOk, setIsNameOk] = useState(true);\n  const [isEmailOk, setIsEmailOk] = useState(true);\n  const [isBodyOk, setIsBodyOk] = useState(true);\n\n  const isNameEmpty = !name && !isNameOk;\n  const isEmailEmpty = !email && !isEmailOk;\n  const isBodyEmpty = !body && !isBodyOk;\n  const id = Math.max(...comments.map(comm => comm.id + 1), 1);\n\n  const postComment = async () => {\n    if (name && email && body) {\n      setIsLoading(true);\n      setError(IError.None);\n\n      const comment: Comment = {\n        name,\n        email,\n        body,\n        postId,\n        id,\n      };\n\n      try {\n        await createComment(comment);\n        setComments([...comments, comment]);\n      } catch {\n        setError(IError.Add);\n      } finally {\n        setIsLoading(false);\n        setIsBodyOk(true);\n        setBody('');\n      }\n    } else {\n      setIsNameOk(false);\n      setIsEmailOk(false);\n      setIsBodyOk(false);\n    }\n  };\n\n  const clearForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n    setIsNameOk(true);\n    setIsEmailOk(true);\n    setIsBodyOk(true);\n    setError(IError.None);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        postComment();\n      }}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            value={name}\n            onChange={(event) => {\n              setName(event.target.value);\n              setIsNameOk(true);\n            }}\n            className={cn('input', {\n              'is-danger': isNameEmpty,\n            })}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameEmpty && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isNameEmpty && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={email}\n            onChange={(event) => {\n              setEmail(event.target.value);\n              setIsEmailOk(true);\n            }}\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', {\n              'is-danger': isEmailEmpty,\n            })}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailEmpty && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isEmailEmpty && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={body}\n            onChange={(event) => {\n              setBody(event.target.value);\n              setIsBodyOk(true);\n            }}\n            placeholder=\"Type comment here\"\n            className={cn('textarea', {\n              'is-danger': isBodyEmpty,\n            })}\n          />\n        </div>\n\n        {isBodyEmpty && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment, Post, User } from '../types';\nimport { client } from './fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (data: Comment) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","/* eslint-disable func-names */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Comment, Post, IError } from '../types';\nimport { deleteComment, getComments } from '../utils/api';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  selectedPost: Post | null\n  isFormOpen: boolean\n  isLoading: boolean\n  setIsFormOpen: (param: boolean) => void\n  setIsLoading: (param: boolean) => void\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  isFormOpen,\n  isLoading,\n  setIsFormOpen,\n  setIsLoading,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [error, setError] = useState(IError.None);\n\n  const { id, title, body } = selectedPost || {};\n  const savedComments = comments;\n  const hasError = (error === IError.Add || error === IError.Delete);\n  const isButtonVisible = !isLoading && !isFormOpen && !error;\n\n  const updateComments = useCallback(\n    (updatedComments: Comment[]) => {\n      setComments(updatedComments);\n    },\n    [],\n  );\n\n  const handleError = useCallback((err: IError) => setError(err), []);\n\n  useEffect(() => {\n    (async function () {\n      if (id) {\n        setIsLoading(true);\n        try {\n          setComments(await getComments(id));\n        } catch {\n          setError(IError.Load);\n        } finally {\n          setIsLoading(false);\n        }\n      }\n    }());\n  }, [selectedPost]);\n\n  useEffect(() => {\n    setError(IError.None);\n  }, [comments]);\n\n  const onDelete = (commentId: number) => () => {\n    const filteredComments = comments\n      .filter(comment => comment.id !== commentId);\n\n    setComments(filteredComments);\n\n    try {\n      deleteComment(commentId);\n    } catch {\n      setComments(savedComments);\n      setError(IError.Delete);\n    }\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {error === IError.Load && (\n            <div\n              className=\"notification is-danger\"\n              data-cy=\"CommentsError\"\n            >\n              Something went wrong\n            </div>\n          )}\n\n          {!isLoading && !error && (\n            comments.length === 0\n              ? (\n                <p\n                  className=\"title is-4\"\n                  data-cy=\"NoCommentsMessage\"\n                >\n                  No comments yet\n                </p>\n              )\n              : (\n                <>\n                  <p className=\"title is-4\">Comments:</p>\n\n                  {comments.map(comment => (\n                    <article\n                      key={comment.id}\n                      className=\"message is-small\"\n                      data-cy=\"Comment\"\n                    >\n                      <div className=\"message-header\">\n                        <a\n                          href={`mailto:${comment.email}`}\n                          data-cy=\"CommentAuthor\"\n                        >\n                          {comment.name}\n                        </a>\n\n                        <button\n                          data-cy=\"CommentDelete\"\n                          type=\"button\"\n                          className=\"delete is-small\"\n                          aria-label=\"delete\"\n                          onClick={onDelete(comment.id)}\n                        >\n                          delete button\n                        </button>\n                      </div>\n\n                      <div className=\"message-body\" data-cy=\"CommentBody\">\n                        {comment.body}\n                      </div>\n                    </article>\n                  ))}\n                </>\n              ))}\n\n          {hasError && (\n            <div className=\"notification is-danger\">\n              {`Could not ${error === IError.Add\n                ? 'add'\n                : 'delete'} comment`}\n            </div>\n          )}\n\n          {isButtonVisible && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsFormOpen(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isFormOpen && !isLoading && (\n          <NewCommentForm\n            postId={id as number}\n            setComments={updateComments}\n            comments={comments}\n            setError={handleError}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import cn from 'classnames';\nimport React from 'react';\nimport { Post } from '../types';\n\ntype Props = {\n  posts: Post[]\n  setSelectedPost: (post: Post | null) => void\n  selectedPostId: number\n  setIsFormOpen: (param: boolean) => void\n  setLoading: (param: boolean) => void\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPostId = 0,\n  setSelectedPost,\n  setIsFormOpen,\n  setLoading,\n}) => {\n  const handlePost = (post: Post) => () => {\n    setSelectedPost(selectedPostId === post.id ? null : post);\n    setIsFormOpen(false);\n    setLoading(true);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr key={post.id} data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={cn('button is-link', {\n                    'is-light': selectedPostId !== post.id,\n                  })}\n                  onClick={handlePost(post)}\n                >\n                  {`${selectedPostId === post.id\n                    ? 'Close'\n                    : 'Open'}`}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport cn from 'classnames';\nimport { User } from '../types';\n\ntype Props = {\n  users: User[]\n  selectedUser: User | null\n  setSelectedUser: (user: User) => void\n  startLoading: () => void\n  closePost: () => void\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n  startLoading,\n  closePost,\n}) => {\n  const [isActive, setIsActive] = useState(false);\n  const toggleDropdown = () => setIsActive(!isActive);\n\n  const onSelect = (user: User) => () => {\n    if (user.id !== selectedUser?.id) {\n      setSelectedUser(user);\n      startLoading();\n    }\n\n    toggleDropdown();\n    closePost();\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', { 'is-active': isActive })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={toggleDropdown}\n          onBlur={() => setIsActive(false)}\n        >\n          <span>{`${selectedUser?.name || 'Choose a user'}`}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <Link\n              key={user.id}\n              to={`/user-${user.id}`}\n              onMouseDown={onSelect(user)}\n              className={cn('dropdown-item', {\n                'is-active': user.id === selectedUser?.id,\n              })}\n            >\n              {user.name}\n            </Link>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable func-names */\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport 'bulma/bulma.sass';\nimport './App.scss';\n\nimport cn from 'classnames';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { Loader } from './components/Loader';\nimport { PostDetails } from './components/PostDetails';\nimport { PostsList } from './components/PostsList';\nimport { UserSelector } from './components/UserSelector';\nimport { Post, User } from './types';\nimport { getPosts, getUsers } from './utils/api';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [user, setUser] = useState<User | null>(null);\n  const [post, setPost] = useState<Post | null>(null);\n  const [hasError, setHasError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n\n  const setSelectedUser = useCallback(\n    (selectedUser: User) => setUser(selectedUser),\n    [],\n  );\n\n  const setSelectedPost = useCallback(\n    (newPost: Post | null) => setPost(newPost),\n    [],\n  );\n\n  const toggleIsLoading = useCallback(\n    (param: boolean) => setIsLoadingComments(param),\n    [],\n  );\n\n  const toggleFormOpen = useCallback(\n    (param: boolean) => setIsFormOpen(param),\n    [],\n  );\n\n  const closePost = useCallback(() => setPost(null), []);\n  const startLoading = useCallback(() => setIsLoading(true), []);\n\n  useEffect(() => {\n    (async function () {\n      try {\n        setUsers(await getUsers());\n      } catch {\n        setHasError(true);\n      }\n    }());\n  }, []);\n\n  useEffect(() => {\n    (async function () {\n      if (user) {\n        try {\n          setPosts(await getPosts(user.id));\n        } catch {\n          setHasError(true);\n        } finally {\n          setIsLoading(false);\n        }\n      }\n    }());\n  }, [user]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={user}\n                  setSelectedUser={setSelectedUser}\n                  startLoading={startLoading}\n                  closePost={closePost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                <p data-cy=\"NoSelectedUser\">\n                  {!user && 'No user selected'}\n                </p>\n\n                {hasError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {isLoading\n                  ? <Loader />\n                  : ((\n                    user && !hasError && (\n                      (posts.length === 0 && (\n                        <div\n                          className=\"notification is-warning\"\n                          data-cy=\"NoPostsYet\"\n                        >\n                          No posts yet\n                        </div>\n                      ))\n                    || (\n                      posts.length > 0 && (\n                        <PostsList\n                          posts={posts}\n                          selectedPostId={post?.id as number}\n                          setSelectedPost={setSelectedPost}\n                          setIsFormOpen={toggleFormOpen}\n                          setLoading={toggleIsLoading}\n                        />\n                      )\n                    ))\n                  ))}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={cn(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': post },\n            )}\n          >\n            {post && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  selectedPost={post}\n                  isFormOpen={isFormOpen}\n                  setIsFormOpen={toggleFormOpen}\n                  setIsLoading={toggleIsLoading}\n                  isLoading={isLoadingComments}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}